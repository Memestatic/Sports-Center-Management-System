// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectIO.model;

#nullable disable

namespace ProjectIO.Migrations
{
    [DbContext(typeof(SportCenterContext))]
    [Migration("20241222150558_initialcreate")]
    partial class initialcreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectIO.model.Facility", b =>
                {
                    b.Property<int>("facilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("facilityId"));

                    b.Property<int>("centerId")
                        .HasColumnType("int");

                    b.Property<string>("facilityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("isChangingRoomAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("isEquipmentAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("promoEnd")
                        .HasColumnType("datetime2");

                    b.Property<double>("promoRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("promoStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("typeId")
                        .HasColumnType("int");

                    b.HasKey("facilityId");

                    b.HasIndex("centerId");

                    b.HasIndex("typeId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("ProjectIO.model.FacilityType", b =>
                {
                    b.Property<int>("typeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("typeId"));

                    b.Property<string>("typeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("typeId");

                    b.ToTable("FacilityTypes");
                });

            modelBuilder.Entity("ProjectIO.model.Pass", b =>
                {
                    b.Property<int>("passId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("passId"));

                    b.Property<int>("passEntriesLeft")
                        .HasColumnType("int");

                    b.Property<int>("passTypeId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("passId");

                    b.HasIndex("passTypeId");

                    b.HasIndex("userId");

                    b.ToTable("Passes");
                });

            modelBuilder.Entity("ProjectIO.model.PassType", b =>
                {
                    b.Property<int>("passTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("passTypeId"));

                    b.Property<int>("passTypeDuration")
                        .HasColumnType("int");

                    b.Property<string>("passTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("passTypeId");

                    b.ToTable("PassTypes");
                });

            modelBuilder.Entity("ProjectIO.model.Reservation", b =>
                {
                    b.Property<int>("reservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("reservationId"));

                    b.Property<int>("facilityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("reservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("reservationStatus")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("reservationId");

                    b.HasIndex("facilityId");

                    b.HasIndex("userId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ProjectIO.model.SportsCenter", b =>
                {
                    b.Property<int>("centerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("centerId"));

                    b.Property<string>("centerCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("centerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("centerState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("centerStreet")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("centerStreetNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("centerZip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("centerId");

                    b.ToTable("SportsCenters");
                });

            modelBuilder.Entity("ProjectIO.model.TrainingSession", b =>
                {
                    b.Property<int>("sessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("sessionId"));

                    b.Property<int>("sessionCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("sessionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("sessionDuration")
                        .HasColumnType("int");

                    b.Property<string>("sessionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("sessionId");

                    b.ToTable("TrainingSessions");
                });

            modelBuilder.Entity("ProjectIO.model.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProjectIO.model.UserLoginCredential", b =>
                {
                    b.Property<int>("loginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("loginId"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("loginId");

                    b.HasIndex("userId");

                    b.ToTable("UserLoginCredentials");
                });

            modelBuilder.Entity("ProjectIO.model.Worker", b =>
                {
                    b.Property<int>("workerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("workerId"));

                    b.Property<int>("functionId")
                        .HasColumnType("int");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("workerId");

                    b.HasIndex("functionId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("ProjectIO.model.WorkerFunction", b =>
                {
                    b.Property<int>("functionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("functionId"));

                    b.Property<string>("functionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("functionId");

                    b.ToTable("WorkerFunctions");
                });

            modelBuilder.Entity("ProjectIO.model.WorkerLoginCredential", b =>
                {
                    b.Property<int>("loginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("loginId"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("workerId")
                        .HasColumnType("int");

                    b.HasKey("loginId");

                    b.HasIndex("workerId");

                    b.ToTable("WorkerLoginCredentials");
                });

            modelBuilder.Entity("ProjectIO.model.WorkerTrainingSession", b =>
                {
                    b.Property<int>("workerTrainingSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("workerTrainingSessionId"));

                    b.Property<int>("sessionId")
                        .HasColumnType("int");

                    b.Property<int>("workerId")
                        .HasColumnType("int");

                    b.HasKey("workerTrainingSessionId");

                    b.ToTable("WorkerTrainingSessions");
                });

            modelBuilder.Entity("ProjectIO.model.Facility", b =>
                {
                    b.HasOne("ProjectIO.model.SportsCenter", "sportsCenter")
                        .WithMany()
                        .HasForeignKey("centerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIO.model.FacilityType", "facilityType")
                        .WithMany()
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("facilityType");

                    b.Navigation("sportsCenter");
                });

            modelBuilder.Entity("ProjectIO.model.Pass", b =>
                {
                    b.HasOne("ProjectIO.model.PassType", "passType")
                        .WithMany()
                        .HasForeignKey("passTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIO.model.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("passType");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectIO.model.Reservation", b =>
                {
                    b.HasOne("ProjectIO.model.Facility", "facility")
                        .WithMany()
                        .HasForeignKey("facilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIO.model.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("facility");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectIO.model.UserLoginCredential", b =>
                {
                    b.HasOne("ProjectIO.model.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectIO.model.Worker", b =>
                {
                    b.HasOne("ProjectIO.model.WorkerFunction", "function")
                        .WithMany()
                        .HasForeignKey("functionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("function");
                });

            modelBuilder.Entity("ProjectIO.model.WorkerLoginCredential", b =>
                {
                    b.HasOne("ProjectIO.model.Worker", "worker")
                        .WithMany()
                        .HasForeignKey("workerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("worker");
                });
#pragma warning restore 612, 618
        }
    }
}
