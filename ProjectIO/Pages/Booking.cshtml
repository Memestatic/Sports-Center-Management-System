@page
@model BookingModel
@using ProjectIO.model
@{
    ViewData["Title"] = "Booking";
}

<h1 class="text-center my-4">Booking</h1>

<div class="container">
    @if (!Model.SelectedCenterId.HasValue)
    {
        <!-- Widok listy ośrodków -->
        <h2 class="text-center mb-4">Available Sports Centers</h2>
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 mb-3">
            @foreach (var center in Model.SportsCenters)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title text-center">@center.Name</h5>
                            <div class="d-flex justify-content-center mt-3">
                                <a class="btn btn-primary" asp-page="/Booking" asp-route-centerId="@center.SportsCenterId">View Facilities</a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (!Model.SelectedObjectId.HasValue)
    {
        <!-- Widok obiektów sportowych dla wybranego ośrodka -->
        <h2 class="text-center mb-4">Facilities in <span class="text-primary">@Model.SelectedCenterName</span></h2>
        @if (Model.Facilities.Any())
        {
            <div class="list-group mb-3">
                @foreach (var facility in Model.Facilities)
                {
                    <a class="list-group-item list-group-item-action d-flex justify-content-between align-items-center"
                       asp-page="/Booking" asp-route-centerId="@Model.SelectedCenterId" asp-route-objectId="@facility.FacilityId">
                        @facility.FacilityName
                        <span class="badge bg-primary">View Calendar</span>
                    </a>
                }
            </div>
        }
        else
        {
            <div class="alert alert-warning text-center" role="alert">
                No facilities available for this center.
            </div>
        }
    }
    else
    {
        <!-- Widok kalendarza rezerwacji dla wybranego obiektu -->
        <!-- Sekcja kalendarza -->
        <div class="calendar-container my-4">
            <div class="row g-3">
                <!-- Kalendarz z dniami miesiąca -->
                <div class="col-md-4">
                    <h3 class="text-center mb-3">Select a Day</h3>
                    <form method="get" id="dateForm"> 
                        <input type="hidden" name="centerId" value="@Model.SelectedCenterId" />
                        <input type="hidden" name="objectId" value="@Model.SelectedObjectId" />
                        <input id="startDate"
                               class="form-control"
                               type="date"
                               name="SelectedDay"
                               value="@Model.SelectedDay"
                               min="@Model.MinDate"
                               max="@Model.MaxDate"
                               onchange="document.getElementById('dateForm').submit();" />
                    </form>
                </div>



                <div class="col-md-6">
                    <h3 class="text-center mb-3">Hours for <span id="selected-day" class="text-primary">@Model.SelectedDay</span></h3>
                    <ul class="list-group">
                        @for (int hour = 9; hour <= 20; hour++)
                        {
                            var slotKey = $"{Model.SelectedCenterId} {Model.SelectedObjectId} {Model.SelectedDay} {hour:00}";
                            bool isTaken = Model.TakenSlots.Contains(slotKey);

                            // Sprawdzenie, czy godzina jest przeszła w bieżącym dniu
                            bool isPastHour = Model.SelectedDay == DateTime.Now.ToString("yyyy-MM-dd") && hour <= DateTime.Now.Hour;

                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @hour:00 - @hour:59
                                <div class="d-flex align-items-center"> 
                                    @if (isTaken || isPastHour)
                                    {
                                        <span class="badge bg-danger me-2">Unavailable</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success me-2">Available</span>

                                        @if (Model.isUserLogged && CurrentPerson.GetInstance() is not Worker)
                                        {
                                            <form method="post" class="d-flex align-items-center">
                                                <input type="hidden" name="SelectedDay" value="@Model.SelectedDay" />
                                                <input type="hidden" name="SelectedHour" value="@hour" />


                                                <div class="form-check me-2">
                                                    
                                                    @if (Model.selectedObject.IsChangingRoom)
                                                    {
                                                        <input type="checkbox"
                                                               class="form-check-input"
                                                               id="lockroom-@hour"
                                                               name="IsLockroom"
                                                               value="true"
                                                               @(Model.IsLockroom ? "checked" : "") />
                                                        <label class="form-check-label" for="lockroom-@hour">Lockroom</label>
                                                    }
                                                </div>

                                                <div class="form-check me-2">
                                                    
                                                    @if (Model.selectedObject.IsEquipment)
                                                    {
                                                        <input type="checkbox"
                                                               class="form-check-input"
                                                               id="gear-@hour"
                                                               name="IsGear"
                                                               value="true"
                                                               @(Model.IsGear ? "checked" : "") />
                                                        <label class="form-check-label" for="gear-@hour">Gear</label>
                                                    }
                                                </div>




                                                <button type="submit" class="btn btn-primary btn-sm">Reserve</button>
                                            </form>
                                        }
                                    }
                                </div>
                            </li>
                        }
                    </ul>
                </div>

            </div>
        </div>
    }
</div>

<script>
    AssignedAssignedWorkerFunction selectDay(input) {
        
        // Odczytaj wybraną datę
        const selectedDate = input.value;

		alert(selectedDate);

        // Wyciągnij dzień z daty (format YYYY-MM-DD)
        const day = selectedDate.split('-')[2];

        // Możesz teraz przekazać ten dzień do swojej funkcji
        console.log('Wybrany dzień:', day);
    
        // Zmieniamy wyświetlaną datę
        document.getElementById('selected-day').textContent = day;
    }
</script>
